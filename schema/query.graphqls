type Query {
    _internal_noauth_semanticSearch(queryText: String!,
        count: Int = 10,
        mediaRecordBlacklist: [UUID!]! = [],
        mediaRecordWhitelist: [UUID!]! = []) : [SemanticSearchResult!]!

    _internal_noauth_getMediaRecordLinksForContent(contentId: UUID!): [MediaRecordSegmentLink!]!
}

type MediaRecordSegmentLink {
    segment1: MediaRecordSegment!
    segment2: MediaRecordSegment!
}

type SemanticSearchResult {
    """
    The similarity score of the search result.
    """
    score: Float!
    mediaRecordSegment: MediaRecordSegment!
}

interface MediaRecordSegment {
    """
    UUID of this segment.
    """
    id: UUID!
    """
    UUID of the media record this segment is part of.
    """
    mediaRecordId: UUID!
}

type DocumentRecordSegment implements MediaRecordSegment {
    """
    UUID of this segment.
    """
    id: UUID!
    """
    UUID of the media record this search result references.
    """
    mediaRecordId: UUID!
    """
    Page of the document this search result references.
    """
    page: Int!
    """
    The text snippet of the document this search result references.
    """
    text: String!
}

type VideoRecordSegment implements MediaRecordSegment {
    """
    UUID of this segment.
    """
    id: UUID!
    """
    UUID of the media record this search result references.
    """
    mediaRecordId: UUID!
    """
    Start time in seconds of the snippet of the video this search result references.
    """
    startTime: Int!
    """
    Text on the screen during this video snippet.
    """
    screenText: String!
    """
    Textual transcript of the spoken text during the video snippet this search result references.
    """
    transcript: String!
}

